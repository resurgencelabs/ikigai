{
  "name": "Subscription",
  "functions": [
    {
      "name": "assert_note",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "n",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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xTHHf6tIzT5OMPHHSYyKXsHDK536e+HiAedF74XoJ5Khqb9vLvdvrPE3V/s3tSya+vsNJf7mWv9mDn9zqX8jhXe3fxODv7nQv4HA31znb973N5f5G+f9DTf+phJ/05W/6cTfsOAvyo+Mchud+vsikL+w4E+e+xOy/qSjP5HlT9b4EwD+INcfOPmDA7/g9Aswv6Dxiw6/4PCLOL9Q9Yu4tVxb27V1XFvXtfVcW9+1DVzb0LWNXNvYtU1c29S1JteaXZvs2hTXWlzLuraZa5u7toVrW7o21bWtXNvatW1c29a17Vzb3rUdXNvRtZ1c29m1XVzb1bXdXNvdtT1c29O1vVzb27V9Un+/UXA/1/Z37QDXDnTtINcOdu0Q1w517TDXDnftCNeOdO0o14527RjXjnXtONeOd+0E10507STXTnbtFNdOde0010537QzXznTtLNfOdu0c18517TzXznftAtcudO0i1y527RLXLnXtMtcud+0K16507SrXrnbtGteude0616537QbXbnTtJtdudu0W12517TbXbnftDtfudO0u1+52bZpr97h2r2v3uXa/aw+49qBrD7n2sGuPuPaoa4+59rhrT7j2pGtPufa0a8+49qxrz7n2vGsvuPaiay+59rJrr7j2qmuvufa6a2+49qZrb7n2tmvvuPaua++59r5rH7j2oWsfufaxa5+49qlrn7n2uWtfuPala1+59rVr37j2rWvfufa9az+49qNrP7n2s2u/uPara7+59rtrf7j2p2t/uTbdtRmuebcXuVbsWolrpa6VuVbuWoVrHVyrdK2ja1WudXKts2tdXOvq2jyuzetaN9e6u9bDtZ6uzedaL9d6u9bHtfld6+taP9cWcG1B1/q7lnZtgGsDXRvk2mDXhrg21LVhri3k2sKuLeLaoq4t5triri3h2pKu+dWfp2q1azWu1brm3xFb51q9aw2uNbq2lGtLu7aMayNcW9a1kUV/z0WjXRvj2ljXlnNtnGvLu7aCayu6Nt61lVyb4NrKrq3i2qquTXRtNdcmuba6a2u4tqZra7m2tmvruLaua+u5tr5rG7i2oWsbubZxNAfGk+2o6LEmU1db21Jf3SI10pSpbmxuGJ6pHd5c1yANMrxh+JTqhpqalobahvrG5sb6TKPU1rRIdnhjTTaaZP2E3l+h36v64xbs+fLOFLaJz3mIQt5X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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 5,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_subscriber",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "proj",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "tier",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "now",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "subscribe_and_mint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "proj",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "exp",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "cd",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "token_contract",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "beneficiary",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "",
      "eJztnN1uGzcQRt9F14ZBzvBv/CpFLow2AQIETlH7ztC7d1WLXGZ3NPTWkvop6VUUgCOfHXJ5ZtfmvO6+ff/98eXr96fn3cPrjncPv73unv98fDr87/nl8a+X3YO7231++mP6d3+3+/L12+fdg9/frUZ55ijHkdPn4ttoTtrwQC7U4YHSYLhwPA6Wwm1ocPtPd7twi9DxitDTmAbNUv49dNKgKcZ8jKCYe/QpIm+OKJsjZHOEd9tD/PYQ2h6i3oB2iLr87RB18dkh26fev2Pu8yLkHZO/DHnH7C9C6B2zvwzRZz8R1ZAUaBGiz74Zos++GaLPvhmiT2Uq7fKzW16+PpVmiD6VZog+lVYI6xnLsV1+zrwI0TNmhuj3ixmiJ9kKCfqyLL5u3lRYFiH6sjRD9GVphuhJNkPUBcMuV8Oxz8GUXKDAx7GBfWxjRXNWofbFhco8+IB10cpDXeQol3k27Qf1xrzcZU4j6mVySP1lHgon9Ta5IIwjA0a9AS8I0xxVQij2AigSK4W4vCJX9wEMcqFcV66QxCW5uh3dBLmqnpsgVw14E+SqiG+C/MoOPSP5lbV4RvJrm+5s5OnaWjwfObBDB+TIDmVqBR13j4BHcmSH2uTIDrXJkR1qkyM71CZHdqhNjuxQmxzZoSZ5RnaoTY7sUJsc2qE5NXLhJTm0Q01yaIea5NAONcmhHWqSQzvUJId2qEkO7VCLvEA71CSHdqhJjuzQLL6SF1eW5MgOtcmRHWqTIzvUJkd2qE2O7FCbHNmhNjmyQ01yQXaoTY7sUJsc2aEl5Eaelm+hBdmhNjmyQ21yZIfa5MgOtcmRHWqTIzvUJkd2qEnuHbJEB+jIFh2gI2tUfCsAhGSFjuzRATqySAfoyCYdoCOrdICO7NIBOrJMB+jINrXR9RMzt4GObNMBOrBNPTHXr54+x+Uvdr1+lulW4IGNOoYHduoYHtiqY3hgr47hgc06hgd26xBeP5F4K/DAfh3DYxu2uAYfyK/goQ0bWGZ4WZ4/8vrJVRT42I6gTZ/jGh7asDHP8Mmtqkr9ADAIPDtqhzPZlfWaRzYsO5kbM/gYVvDIhp1+NjX4aa9cwSMblim2fZ75x+EHeEY2LHNKDT6s/kR2mhlk+FDmzAcJ9vCQG0d3IjkVZWhkX9djjNQtx63Hl6fF8X/+PpQ/5DpjW/7inBPOdv6StCYaSfqT3xpzcL4yB5flI8lGrosuluycG3POo/xNFVlrPZGYPpJs5DrucskuqY7Nwh9arNCl5Lad1Vfm2F2nmj87JXqB6qWmnMktOr941utCdpWfuXs5rKWxxNYyo3vUOrSY2UivF3n/AYneDmcLieT6bt07KjaKL6WVYELZ/t6GIDT3vMrxDVuv1eCx9RIJHluvTOCxdcdze2PCnIv59Z6oNffpe/tMP0Db7+s1lo46qHVMe+MUu10qatmgyb3Vwuy6nVtDIF8zR2GekGM2dAn/qtnQlfqrZkO3KUA24lwvJDfIRqpVC/t5aNAP+lhKPFEmXCgZ0t7ESQl9Mv5hOVEoXIFFliwnWoJdisV7aq/lfRR7mUxz355V+vaF6p3g4yyY5MkeHFoXu9C9oE5vS+VEY7KfPCWx3b6pe395uD3X3yuuMXRPQHnrPXmij9pPnugU6tiU42rtnSjKbi8lcxtVn8Xbg6mdLuHSbfJv7TDlXrV6twj9zBLjW2vBe3W7n55721u9OfUxHWPUbXkQo/9x1yhI3WGsoMlfJy6pdUWNfp6/FI+bu547asuVeb39uXu9Ze0gSG9aOwjS29aaQXwi59GJtoHl/af9/m/clj/e"
    ],
    "fileMap": {
      "1": {
        "source": "mod asset_note;\nmod Token_interface;\n\ncontract Subscription {\n    use dep::std::option::Option;\n    use dep::value_note::{\n        balance_utils,\n        utils::{increment, decrement},\n        value_note::{VALUE_NOTE_LEN, ValueNote, ValueNoteMethods},\n    };\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        note::{\n            note_header::NoteHeader,\n            note_getter_options::NoteGetterOptions,\n            utils as note_utils,\n        },\n        state_vars::{map::Map, set::Set, public_state::PublicState, singleton::Singleton},\n        types::type_serialization::{\n            field_serialization::{FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n            bool_serialization::{BoolSerializationMethods, BOOL_SERIALIZED_LEN},\n            aztec_address_serialization::{AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN},\n        },\n        types::address::{AztecAddress},\n        selector::compute_selector,\n        log::emit_encrypted_log,\n        oracle::get_public_key::get_public_key,\n    };\n    use dep::authwit::{\n        auth::{\n            assert_current_call_valid_authwit, \n            assert_current_call_valid_authwit_public,\n            IS_VALID_SELECTOR,\n            compute_authwit_message_hash, \n        },\n    };\n\n    use crate::asset_note::{AssetNote, AssetNoteMethods, ASSET_NOTE_LEN};\n    use crate::Token_interface::{TokenPrivateContextInterface, FromTransferStruct, ToTransferStruct};\n\n    struct Storage {\n        // the attributes of the strictly private NFT\n        nft_data: Map<Set<AssetNote, ASSET_NOTE_LEN>>,\n        \n        \n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                nft_data: Map::new(\n                    context,\n                    1, // Storage slot\n                    |context, slot| {\n                        Set::new(context, slot, AssetNoteMethods)\n                    },\n                ),     \n            }\n        }\n    }\n\n    // Constructs the contract with no parameters required\n    #[aztec(private)]\n    fn constructor( )  {}\n\n    \n   \n    \n    // The minting function that takes the project id, tier id, expiry epoch and a secret code (in case you want to \n    // transfer said NFT to a friend)\n    #[aztec(private)]\n    fn subscribe_and_mint( \n        proj: Field,\n        exp: Field,\n        cd: Field,\n        token_contract: AztecAddress,\n        beneficiary: Field,\n        amount: Field,\n        nonce: Field,\n    ) {\n        let mut tr = 0 as Field;\n        if (amount as u32 >= 100){\n            tr = 1;\n        }\n        if (amount as u32 >= 200){\n            tr = 2;\n        }\n        if (amount as u32 >= 500){\n            tr = 3;\n        }\n        if (amount as u32 >= 1000){\n            tr = 4;\n        }\n        if (amount as u32 >= 2000){\n            tr = 5;\n        }\n\n        let owner = context.msg_sender();\n       \n       \n        let from = FromTransferStruct{address: owner};\n        let to = ToTransferStruct{address: beneficiary};\n        \n        let res = TokenPrivateContextInterface::at(token_contract.address).transfer(&mut context, from, to, amount, nonce);\n        assert (res[0] == 1);\n\n        let mut owner_note = AssetNote::new(owner, proj, tr, exp, cd);\n\n        let owner_set = storage.nft_data.at(owner);\n        owner_set.insert(&mut owner_note, true);\n    }\n\n    // No transfer method because this is an instance of a Soul Bound Private NFT\n\n\n    // Reads all notes under the given caller id Field, and asserts if the number of such notes is\n    // at least n\n    #[aztec(private)]\n    fn assert_note(n: Field){\n        let owner = context.msg_sender();\n        let options = NoteGetterOptions::new();\n        let owner_notes = storage.nft_data.at(owner);\n        let maybe_notes = owner_notes.get_notes(options);\n        //let selector = compute_selector(\"_check_id_match(Field)\");\n        //context.call_public_function(context.this_address(), selector, [maybe_notes.len()]);\n        assert (maybe_notes[n - 1].is_some());\n\n    }\n\n    // checks if the user if a subscriber of the given tier for the given project, with the current timestamp\n    // epoch also being provided as an argument\n    #[aztec(private)]\n    fn is_subscriber(proj: Field, tier: Field, now: Field) {\n        let owner = context.msg_sender();\n        let options = NoteGetterOptions::new();\n        let owner_notes = storage.nft_data.at(owner);\n        let maybe_notes = owner_notes.get_notes(options);\n        let mut tmax: Field = 0;\n        for i in 0..maybe_notes.len() {\n            if maybe_notes[i].is_some() {\n                let note = maybe_notes[i].unwrap_unchecked();\n                if ((note.project as u32 == proj as u32) & (note.expiry as u32 > now as u32)) {\n                    if (tmax as u32 < note.tier as u32) {\n                        tmax = note.tier;\n                    }\n                }\n            }\n        }\n        assert (tmax as u32 >= tier as u32);\n        \n    }\n\n   \n   \n\n    // Computes note hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; ASSET_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(AssetNoteMethods, note_header, preimage)\n    }\n}",
        "path": "/home/ritik/hello_aztec/sandbox_testing/ikigai/src/contracts/subscription/src/main.nr"
      },
      "5": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\npub fn pedersen_hash<N>(input : [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input : [Field; N], _separator : u32) -> Field {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash.nr"
      },
      "17": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "18": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "33": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "36": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/abi.nr"
      },
      "37": {
        "source": "use crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  pedersen_hash([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/address.nr"
      },
      "39": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/context.nr"
      },
      "40": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/hash.nr"
      },
      "41": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/log.nr"
      },
      "46": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/note/lifecycle.nr"
      },
      "47": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/note/note_getter.nr"
      },
      "49": {
        "source": "use crate::hash::pedersen_hash;\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/note/note_hash.nr"
      },
      "53": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/note/utils.nr"
      },
      "55": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/oracle/arguments.nr"
      },
      "56": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/oracle/call_private_function.nr"
      },
      "60": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n  get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_and_partial_address_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/oracle/get_public_key.nr"
      },
      "61": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key.nr"
      },
      "65": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/oracle/notes.nr"
      },
      "67": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"
      },
      "68": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/private_call_stack_item.nr"
      },
      "73": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"
      },
      "75": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/state_vars/set.nr"
      },
      "80": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/types/vec.nr"
      },
      "86": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/home/ritik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.12.0/yarn-project/aztec-nr/aztec/src/utils.nr"
      },
      "95": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_siloed_note_hash,\n    },\n    oracle::{\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    context::PrivateContext,\n    state_vars::set::Set,\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n};\n\nglobal ASSET_NOTE_LEN: Field = 5;\n\n// Stores an asset\nstruct AssetNote {\n    owner: Field,\n    project: Field,\n    tier: Field,\n    expiry: Field,\n    code: Field,\n    header: NoteHeader,\n}\n\nimpl AssetNote {\n    pub fn new(owner: Field, project: Field, tier: Field, expiry: Field, code: Field) -> Self {\n        AssetNote {\n            owner,\n            project,\n            tier,\n            expiry,\n            code,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; ASSET_NOTE_LEN]{\n        [self.owner, self.project, self.tier, self.expiry, self.code]\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let siloed_note_hash = compute_siloed_note_hash(AssetNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            siloed_note_hash,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; ASSET_NOTE_LEN]) -> AssetNote {\n    AssetNote {\n        owner: preimage[0],\n        project: preimage[1],\n        tier: preimage[2],\n        expiry: preimage[3],\n        code: preimage[4],\n        header: NoteHeader::empty(),\n    }\n}\n\nfn serialize(note: AssetNote) -> [Field; ASSET_NOTE_LEN]{\n    note.serialize()\n}\n\nfn compute_note_hash(note: AssetNote) -> Field {\n    // TODO(#1205) Should use a non-zero generator index.\n    dep::std::hash::pedersen(note.serialize())[0]\n}\n\nfn compute_nullifier(note: AssetNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: AssetNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut AssetNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: AssetNote) {\n    note.broadcast(context, slot);\n}\n\nglobal AssetNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};",
        "path": "/home/ritik/hello_aztec/sandbox_testing/ikigai/src/contracts/subscription/src/asset_note.nr"
      },
      "96": {
        "source": "/* Autogenerated file, do not edit! */\n  \nuse dep::std;\nuse dep::aztec::context::{ PrivateContext, PublicContext };\nuse dep::aztec::constants_gen::RETURN_VALUES_LENGTH;\n\nstruct FromBurnStruct {\n  address: Field,\n}\n\nstruct FromBurnPublicStruct {\n  address: Field,\n}\n\nstruct ToMintPublicStruct {\n  address: Field,\n}\n\nstruct ToRedeemShieldStruct {\n  address: Field,\n}\n\nstruct NewAdminSetAdminStruct {\n  address: Field,\n}\n\nstruct MinterSetMinterStruct {\n  address: Field,\n}\n\nstruct FromShieldStruct {\n  address: Field,\n}\n\nstruct FromTransferStruct {\n  address: Field,\n}\n\nstruct ToTransferStruct {\n  address: Field,\n}\n\nstruct FromTransferPublicStruct {\n  address: Field,\n}\n\nstruct ToTransferPublicStruct {\n  address: Field,\n}\n\nstruct FromUnshieldStruct {\n  address: Field,\n}\n\nstruct ToUnshieldStruct {\n  address: Field,\n}\n\n\n// Interface for calling Token functions from a private context\nstruct TokenPrivateContextInterface {\n  address: Field,\n}\n\nimpl TokenPrivateContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn burn(\n    self,\n    context: &mut PrivateContext,\n    from: FromBurnStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 3];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = nonce;\n\n    context.call_private_function(self.address, 0xd4fcc96e, serialized_args)\n  }\n  \n\n  pub fn burn_public(\n    self,\n    context: &mut PrivateContext,\n    from: FromBurnPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) {\n    let mut serialized_args = [0; 3];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = nonce;\n\n    context.call_public_function(self.address, 0xb0e964d5, serialized_args)\n  }\n  \n\n  pub fn mint_private(\n    self,\n    context: &mut PrivateContext,\n    amount: Field,\n    secret_hash: Field\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secret_hash;\n\n    context.call_public_function(self.address, 0x10763932, serialized_args)\n  }\n  \n\n  pub fn mint_public(\n    self,\n    context: &mut PrivateContext,\n    to: ToMintPublicStruct,\n    amount: Field\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = to.address;\n    serialized_args[1] = amount;\n\n    context.call_public_function(self.address, 0x6bfd1d5b, serialized_args)\n  }\n  \n\n  pub fn redeem_shield(\n    self,\n    context: &mut PrivateContext,\n    to: ToRedeemShieldStruct,\n    amount: Field,\n    secret: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 3];\n    serialized_args[0] = to.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = secret;\n\n    context.call_private_function(self.address, 0xb77168f2, serialized_args)\n  }\n  \n\n  pub fn set_admin(\n    self,\n    context: &mut PrivateContext,\n    new_admin: NewAdminSetAdminStruct\n  ) {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = new_admin.address;\n\n    context.call_public_function(self.address, 0x41b90896, serialized_args)\n  }\n  \n\n  pub fn set_minter(\n    self,\n    context: &mut PrivateContext,\n    minter: MinterSetMinterStruct,\n    approve: bool\n  ) {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = minter.address;\n    serialized_args[1] = approve as Field;\n\n    context.call_public_function(self.address, 0x7f020b80, serialized_args)\n  }\n  \n\n  pub fn shield(\n    self,\n    context: &mut PrivateContext,\n    from: FromShieldStruct,\n    amount: Field,\n    secret_hash: Field,\n    nonce: Field\n  ) {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = secret_hash;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x1d24add0, serialized_args)\n  }\n  \n\n  pub fn transfer(\n    self,\n    context: &mut PrivateContext,\n    from: FromTransferStruct,\n    to: ToTransferStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_private_function(self.address, 0xb1aa668a, serialized_args)\n  }\n  \n\n  pub fn transfer_public(\n    self,\n    context: &mut PrivateContext,\n    from: FromTransferPublicStruct,\n    to: ToTransferPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x7db8f449, serialized_args)\n  }\n  \n\n  pub fn unshield(\n    self,\n    context: &mut PrivateContext,\n    from: FromUnshieldStruct,\n    to: ToUnshieldStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_private_function(self.address, 0x78303b89, serialized_args)\n  }\n  \n}\n  \n  \n\n\n// Interface for calling Token functions from a public context\nstruct TokenPublicContextInterface {\n  address: Field,\n}\n\nimpl TokenPublicContextInterface {\n  pub fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  pub fn burn_public(\n    self,\n    context: PublicContext,\n    from: FromBurnPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 3];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = nonce;\n\n    context.call_public_function(self.address, 0xb0e964d5, serialized_args)\n  }\n  \n\n  pub fn mint_private(\n    self,\n    context: PublicContext,\n    amount: Field,\n    secret_hash: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = amount;\n    serialized_args[1] = secret_hash;\n\n    context.call_public_function(self.address, 0x10763932, serialized_args)\n  }\n  \n\n  pub fn mint_public(\n    self,\n    context: PublicContext,\n    to: ToMintPublicStruct,\n    amount: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = to.address;\n    serialized_args[1] = amount;\n\n    context.call_public_function(self.address, 0x6bfd1d5b, serialized_args)\n  }\n  \n\n  pub fn set_admin(\n    self,\n    context: PublicContext,\n    new_admin: NewAdminSetAdminStruct\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 1];\n    serialized_args[0] = new_admin.address;\n\n    context.call_public_function(self.address, 0x41b90896, serialized_args)\n  }\n  \n\n  pub fn set_minter(\n    self,\n    context: PublicContext,\n    minter: MinterSetMinterStruct,\n    approve: bool\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 2];\n    serialized_args[0] = minter.address;\n    serialized_args[1] = approve as Field;\n\n    context.call_public_function(self.address, 0x7f020b80, serialized_args)\n  }\n  \n\n  pub fn shield(\n    self,\n    context: PublicContext,\n    from: FromShieldStruct,\n    amount: Field,\n    secret_hash: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = amount;\n    serialized_args[2] = secret_hash;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x1d24add0, serialized_args)\n  }\n  \n\n  pub fn transfer_public(\n    self,\n    context: PublicContext,\n    from: FromTransferPublicStruct,\n    to: ToTransferPublicStruct,\n    amount: Field,\n    nonce: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialized_args = [0; 4];\n    serialized_args[0] = from.address;\n    serialized_args[1] = to.address;\n    serialized_args[2] = amount;\n    serialized_args[3] = nonce;\n\n    context.call_public_function(self.address, 0x7db8f449, serialized_args)\n  }\n  \n}\n  \n  \n",
        "path": "/home/ritik/hello_aztec/sandbox_testing/ikigai/src/contracts/subscription/src/Token_interface.nr"
      }
    }
  }
}